{"ast":null,"code":"var _jsxFileName = \"E:\\\\ITP Project\\\\PrescriptionMS\\\\frontend\\\\src\\\\Components\\\\PrescriptionView\\\\PrescriptionView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrescriptionView = () => {\n  _s();\n  const [prescriptions, setPrescriptions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch prescriptions from the backend\n  useEffect(() => {\n    const fetchPrescriptions = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/prescriptions'); // Update the URL if needed\n        setPrescriptions(response.data.prescriptions);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching prescriptions:', err);\n        setError('Failed to fetch prescriptions');\n        setLoading(false);\n      }\n    };\n    fetchPrescriptions();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Prescriptions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), prescriptions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No prescriptions found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Patient Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Doctor Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date Issued\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Valid Until\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: prescriptions.map(prescription => {\n          var _prescription$patient, _prescription$doctorI;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: ((_prescription$patient = prescription.patientId) === null || _prescription$patient === void 0 ? void 0 : _prescription$patient.name) || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: ((_prescription$doctorI = prescription.doctorId) === null || _prescription$doctorI === void 0 ? void 0 : _prescription$doctorI.name) || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(prescription.dateIssued).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(prescription.validUntil).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: prescription.notes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 33\n            }, this)]\n          }, prescription._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(PrescriptionView, \"TMTlJREsojfjTDlldNuRkDJbAkE=\");\n_c = PrescriptionView;\nexport default PrescriptionView;\nvar _c;\n$RefreshReg$(_c, \"PrescriptionView\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","PrescriptionView","_s","prescriptions","setPrescriptions","loading","setLoading","error","setError","fetchPrescriptions","response","get","data","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","border","map","prescription","_prescription$patient","_prescription$doctorI","patientId","name","doctorId","Date","dateIssued","toLocaleDateString","validUntil","notes","_id","_c","$RefreshReg$"],"sources":["E:/ITP Project/PrescriptionMS/frontend/src/Components/PrescriptionView/PrescriptionView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PrescriptionView = () => {\r\n    const [prescriptions, setPrescriptions] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Fetch prescriptions from the backend\r\n    useEffect(() => {\r\n        const fetchPrescriptions = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/api/prescriptions'); // Update the URL if needed\r\n                setPrescriptions(response.data.prescriptions);\r\n                setLoading(false);\r\n            } catch (err) {\r\n                console.error('Error fetching prescriptions:', err);\r\n                setError('Failed to fetch prescriptions');\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchPrescriptions();\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Prescriptions</h1>\r\n            {prescriptions.length === 0 ? (\r\n                <p>No prescriptions found.</p>\r\n            ) : (\r\n                <table border=\"1\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Patient Name</th>\r\n                            <th>Doctor Name</th>\r\n                            <th>Date Issued</th>\r\n                            <th>Valid Until</th>\r\n                            <th>Notes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {prescriptions.map((prescription) => (\r\n                            <tr key={prescription._id}>\r\n                                <td>{prescription.patientId?.name || 'N/A'}</td>\r\n                                <td>{prescription.doctorId?.name || 'N/A'}</td>\r\n                                <td>{new Date(prescription.dateIssued).toLocaleDateString()}</td>\r\n                                <td>{new Date(prescription.validUntil).toLocaleDateString()}</td>\r\n                                <td>{prescription.notes}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrescriptionView;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAD,SAAS,CAAC,MAAM;IACZ,MAAMa,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,yCAAyC,CAAC,CAAC,CAAC;QAC7EP,gBAAgB,CAACM,QAAQ,CAACE,IAAI,CAACT,aAAa,CAAC;QAC7CG,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOO,GAAG,EAAE;QACVC,OAAO,CAACP,KAAK,CAAC,+BAA+B,EAAEM,GAAG,CAAC;QACnDL,QAAQ,CAAC,+BAA+B,CAAC;QACzCF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,kBAAkB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE;IACT,oBAAOL,OAAA;MAAAe,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,IAAIZ,KAAK,EAAE;IACP,oBAAOP,OAAA;MAAAe,QAAA,EAAMR;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC7B;EAEA,oBACInB,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBhB,aAAa,CAACiB,MAAM,KAAK,CAAC,gBACvBpB,OAAA;MAAAe,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE9BnB,OAAA;MAAOqB,MAAM,EAAC,GAAG;MAAAN,QAAA,gBACbf,OAAA;QAAAe,QAAA,eACIf,OAAA;UAAAe,QAAA,gBACIf,OAAA;YAAAe,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrBnB,OAAA;YAAAe,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBnB,OAAA;YAAAe,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBnB,OAAA;YAAAe,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBnB,OAAA;YAAAe,QAAA,EAAI;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACRnB,OAAA;QAAAe,QAAA,EACKZ,aAAa,CAACmB,GAAG,CAAEC,YAAY;UAAA,IAAAC,qBAAA,EAAAC,qBAAA;UAAA,oBAC5BzB,OAAA;YAAAe,QAAA,gBACIf,OAAA;cAAAe,QAAA,EAAK,EAAAS,qBAAA,GAAAD,YAAY,CAACG,SAAS,cAAAF,qBAAA,uBAAtBA,qBAAA,CAAwBG,IAAI,KAAI;YAAK;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAChDnB,OAAA;cAAAe,QAAA,EAAK,EAAAU,qBAAA,GAAAF,YAAY,CAACK,QAAQ,cAAAH,qBAAA,uBAArBA,qBAAA,CAAuBE,IAAI,KAAI;YAAK;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC/CnB,OAAA;cAAAe,QAAA,EAAK,IAAIc,IAAI,CAACN,YAAY,CAACO,UAAU,CAAC,CAACC,kBAAkB,CAAC;YAAC;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjEnB,OAAA;cAAAe,QAAA,EAAK,IAAIc,IAAI,CAACN,YAAY,CAACS,UAAU,CAAC,CAACD,kBAAkB,CAAC;YAAC;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjEnB,OAAA;cAAAe,QAAA,EAAKQ,YAAY,CAACU;YAAK;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GALxBI,YAAY,CAACW,GAAG;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAMrB,CAAC;QAAA,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACV;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACjB,EAAA,CA7DID,gBAAgB;AAAAkC,EAAA,GAAhBlC,gBAAgB;AA+DtB,eAAeA,gBAAgB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}